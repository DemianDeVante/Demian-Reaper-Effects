// Copyright 2007, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc: D Huge Booty Bass
//tags: processing saturation
//author: Stillwell

slider1:0<0,100,0.1>-Mix (%)
slider2:0<0,100,0.1>-Drive (%)
slider3:100<20,200,1>-Frequency (Hz)

import ui-lib.jsfx-inc
filename:0,themes/bitmap-simple/theme-cyan.png
needs_slider_update

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
  freemem = ui_setup(1000000);
  ext_tail_size = -1;
  gain1 = 0;
  freq1 = freq;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 - cosw01)/2;
  b11 = (1 - cosw01);
  b21 = (1 - cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  gain3 = 0;
  freq3 = freq;
  a3 = 10^(gain3/40);
  s3 = 1;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 + cosw03)/2;
  b13 = -(1 + cosw03);
  b23 = (1 + cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;
  function slider_update_function() (
    	needs_slider_update = 0;
    	//------ Previous @slider code
      mix=(slider1 * 1.5) / 100;
      drive=slider2 / 100;
      mix1 = 1 - mix;
      drive1 = 1 / (1 - (drive / 2));
      drive2 = drive / 2;
      freq = slider3;

      gain1 = 0;
      freq1 = freq;
      a1 = 1;
      s1 = 1;
      q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
      w01 = 2 * $pi * freq1/srate;
      cosw01 = cos(w01);
      sinw01 = sin(w01);
      alpha1 = sinw01 / (2 * q1);

      b01 = (1 - cosw01)/2;
      b11 = (1 - cosw01);
      b21 = (1 - cosw01)/2;
      a01 = 1 + alpha1;
      a11 = -2 * cosw01;
      a21 = 1 - alpha1;
      b01 /= a01;
      b11 /= a01;
      b21 /= a01;
      a11 /= a01;
      a21 /= a01;

      gain3 = 0;
      freq3 = freq;
      a3 = 10^(gain3/40);
      s3 = 1;
      q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
      w03 = 2 * $pi * freq3/srate;
      cosw03 = cos(w03);
      sinw03 = sin(w03);
      alpha3 = sinw03 / (2 * q3);

      b03 = (1 + cosw03)/2;
      b13 = -(1 + cosw03);
      b23 = (1 + cosw03)/2;
      a03 = 1 + alpha3;
      a13 = -2 * cosw03;
      a23 = 1 - alpha3;
      b03 /= a03;
      b13 /= a03;
      b23 /= a03;
      a13 /= a03;
      a23 /= a03;
    	//------ Previous @slider code
  );

@slider
  slider_update_function();

@block
  needs_slider_update ? slider_update_function();

@sample

  dry0 = spl0;
  dry1 = spl1;

  //lpf to extract bass signal
  ospl0 = dry0;
  dry0 = b01 * dry0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = dry0;

  ospl1 = dry1;
  dry1 = b01 * dry1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = dry1;

  //enhance bass signal
  wet0 = drive1 * dry0 * (1 - abs(dry0 * drive2));
  wet1 = drive1 * dry1 * (1 - abs(dry1 * drive2)); 

  //hpf to isolate enhance signal
  ospl0 = wet0;
  wet0 = b03 * wet0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = wet0;

  ospl1 = wet1;
  wet1 = b03 * wet1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = wet1;


  spl0 = spl0 + (mix) * wet0;
  spl1 = spl1 + (mix) * wet1;

@gfx 240 120

  function dem_min_ui_size(dem_min_ui_width, dem_min_ui_height) (
    (gfx_h <= dem_min_ui_height) ? (
      ui_push_rect(0,0,gfx_w,dem_min_ui_height);
      gfx_h = dem_min_ui_height
    );
  );

  function gfx_ui_automate_slider(slidervar*, new_value) (
    slidervar !== new_value ? (
      slidervar = new_value;
      slider_automate(slidervar);
    );
    new_value;
  );

  function gfx_ui_layout_textnumber(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_clear(title, value, format) local(h) (
    value;
  );

  function gfx_ui_dial_rounded(dem_theme, slidervar*, low, high, bias, default, step) (
    slidervar != floor(slidervar._ui_gen_float/step + 0.5)*step ? slidervar._ui_gen_float = slidervar;
    slidervar._ui_gen_float = control_dial(dem_theme, slidervar._ui_gen_float, low, high, bias, default);
    gfx_ui_automate_slider(slidervar, floor(slidervar._ui_gen_float/step + 0.5)*step);
  );

  function gfx_ui_layout_text(title, text) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      ui_text(text);
    ui_pop();
  );

  function gfx_ui_layout_title(title) (
    gfx_ui_layout_text(title, "");
  );

  function gfx_ui_radio_option(value, optionValue, optionText) (
    ui_align(0.1, 0.5);
    ui_split_left(30);
      value = control_radio(value, optionValue);
    ui_pop();
    ui_click() ? value = optionValue;
    ui_text(optionText);
    value;
  );

  function dem_mcp_ui() (
    control_start("main", "bitmap-simple", 0);
    ui_screen() === "main" ? (
      ui_split_leftratio(2/5);
            gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber_down_title("Mix", slider1, "%.1f %%"));
            gfx_ui_dial_rounded(7,slider1, 0, 100, 2, 0, 0.1);
      ui_pop();
      ui_split_leftratio(1/3);
          ui_split_topratio(1/5);
          ui_pop();
          ui_split_topratio(3/4);
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber_down_value("Frequency", slider3, "%i"));
            gfx_ui_dial_rounded(9,slider3, 20, 200, 0, 100, 1);
          ui_pop();
      ui_pop();
      ui_split_leftratio(1);
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber_down_title("Drive", slider2, "%.1f %%"));
            gfx_ui_dial_rounded(6,slider2, 0, 100, 2, 0, 0.1);
      ui_pop();
    ) : control_system();
  );

  function dem_full_ui() (
    control_start("main", "bitmap-simple", 0);
    ui_screen() === "main" ? (
      ui_split_topratio(1/1); // single row
        ui_split_leftratio(3/3);
          // row 1, group 1
          ui_split_leftratio(1/3);
            gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber("Mix", slider1, "%.1f %%"));
            gfx_ui_dial_rounded(7,slider1, 0, 100, 2, 0, 0.1);
          ui_split_next();
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber("Frequency", slider3, "%i Hz"));
            gfx_ui_dial_rounded(9,slider3, 20, 200, 0, 100, 1);
          ui_split_next();
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber("Drive", slider2, "%.1f %%"));
            gfx_ui_dial_rounded(6,slider2, 0, 100, 2, 0, 0.1);
          ui_pop();
        ui_pop();
      ui_pop();
    ) : control_system();
  );

  dem_initial_gfx_width = 240;  // inital width in @gfx width height
  dem_initial_gfx_height = 120;  // inital height in @gfx width height
  dem_max_mcp_width = 120;   // maximum embedded width
  dem_max_mcp_height = (gfx_w *(dem_initial_gfx_height/dem_initial_gfx_width)); // keep ratio

  gfx_w <= dem_max_mcp_width ? (
    uix_default_fontsize = 7;
    dem_min_ui_size(dem_max_mcp_width, dem_max_mcp_height);
    dem_mcp_ui();

  ) : (
    uix_default_fontsize = 12;
    //dem_min_ui_size(121, 121);
    dem_full_ui();
  );

  ui_interacted() ? needs_slider_update = 1;