// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc:D RBJ 1073 EQ
//tags: equalizer filter
//author: Stillwell

slider1:0<0,4,1{Off,50,80,160,300}>-HPF
slider2:0<0,4,1{Off,35,60,110,220}>-Low Shelf (Hz)
slider3:0<-20,20,0.1>-Low Boost/Cut (dB)
slider4:0<0,5,1{360,700,1.6k,3.2k,4.8k,7.2k}>-Mid Freq (Hz)
slider5:0<-20,20,0.1>-Mid Boost/Cut (dB)
slider6:0<-20,20,0.1>-High Shelf (12k) Boost/Cut (dB)
slider7:0<-20,10,0.1>-Gain (dB)

import ui-lib.jsfx-inc
filename:0,themes/bitmap-simple/theme-cyan.png
needs_slider_update

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
  freemem = ui_setup(1000000);
  ext_tail_size = -1;
  hpf = 0;
  gain1 = 0;
  freq1 = 50;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  lshelf = 0;
  gain3 = 0;
  freq3 = 35;
  a3 = 10^(gain3/40);
  s3 = 2;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = a3 * ((a3+1) - (a3-1)*cosw03 + 2*sqrt(a3)*alpha3);
  b13 = 2 * a3 * ((a3-1) - (a3+1)*cosw03);
  b23 = a3 * ((a3+1) - (a3-1)*cosw03 - 2*sqrt(a3)*alpha3);
  a03 = (a3+1) + (a3-1)*cosw03 + 2*sqrt(a3)*alpha3;
  a13 = -2 * ((a3-1) + (a3+1)*cosw03);
  a23 = (a3+1)+(a3-1)*cosw03-2*sqrt(a3)*alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  gain5 = 0;
  freq5 = 360;
  a5 = 10^(gain5/20);
  q5 = 1.4;
  w05 = 2 * $pi * freq5/srate;
  cosw05 = cos(w05);
  sinw05 = sin(w05);
  alpha5 = sinw05 / (2 * q5);

  b05 = 1 + alpha5 * a5;
  b15 = -2 * cosw05;
  b25 = 1 - alpha5 * a5;
  a05 = 1 + alpha5 / a5;
  a15 = -2 * cosw05;
  a25 = 1 - alpha5 / a5;
  b05 /= a05;
  b15 /= a05;
  b25 /= a05;
  a15 /= a05;
  a25 /= a05;

  gain7 = 0;
  freq7 = 12000;
  a7 = 10^(gain7/40);
  s7 = 0.3;
  q7 = 1 / (sqrt((a7 + 1/a7)*(1/s7 - 1) + 2));
  w07 = 2 * $pi * freq7/srate;
  cosw07 = cos(w07);
  sinw07 = sin(w07);
  alpha7 = sinw07 / (2 * q7);

  b07 = a7 * ((a7+1) + (a7-1)*cosw07 + 2*sqrt(a7)*alpha7);
  b17 = -2*a7*((a7-1) + (a7+1)*cosw07);
  b27 = a7*((a7+1) + (a7-1)*cosw07 - 2*sqrt(a7)*alpha7);
  a07 = (a7+1) - (a7-1)*cosw07 + 2*sqrt(a7)*alpha7;
  a17 = 2*((a7-1) - (a7+1)*cosw07);
  a27 = (a7+1)-(a7-1)*cosw07 - 2*sqrt(a7)*alpha7;
  b07 /= a07;
  b17 /= a07;
  b27 /= a07;
  a17 /= a07;
  a27 /= a07;

  gain = 1;

  function slider_update_function() (
      needs_slider_update = 0;
      //------ Previous @slider code
      freq1 = (slider1 == 0 ? 50 : (slider1 == 1 ? 50 : (slider1 == 2 ? 80 : (slider1 == 3 ? 160 : 300))));
      freq3 = (slider2 == 0 ? 35 : (slider2 == 1 ? 35 : (slider2 == 2 ? 60 : (slider2 == 3 ? 110 : 220))));
      gain3 = slider3;
      freq5 = (slider4 == 0 ? 360 : (slider4 == 1 ? 700 : (slider4 == 2 ? 1600 : (slider4 == 3 ? 3200 : (slider4 == 4 ? 4800 : 7200)))));
      gain5 = slider5;
      gain7 = slider6;

      gain = 10^(slider7/20);

      slider1 == 0 ? hpf = 0 : hpf = 1;
      slider2 == 0 ? lshelf = 0 : lshelf = 1;

      a1 = 1;
      s1 = 1;
      q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
      w01 = 2 * $pi * freq1/srate;
      cosw01 = cos(w01);
      sinw01 = sin(w01);
      alpha1 = sinw01 / (2 * q1);

      b01 = (1 + cosw01)/2;
      b11 = -(1 + cosw01);
      b21 = (1 + cosw01)/2;
      a01 = 1 + alpha1;
      a11 = -2 * cosw01;
      a21 = 1 - alpha1;
      b01 /= a01;
      b11 /= a01;
      b21 /= a01;
      a11 /= a01;
      a21 /= a01;

      a3 = 10^(gain3/40);
      s3 = 2;
      q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
      w03 = 2 * $pi * freq3/srate;
      cosw03 = cos(w03);
      sinw03 = sin(w03);
      alpha3 = sinw03 / (2 * q3);

      b03 = a3 * ((a3+1) - (a3-1)*cosw03 + 2*sqrt(a3)*alpha3);
      b13 = 2 * a3 * ((a3-1) - (a3+1)*cosw03);
      b23 = a3 * ((a3+1) - (a3-1)*cosw03 - 2*sqrt(a3)*alpha3);
      a03 = (a3+1) + (a3-1)*cosw03 + 2*sqrt(a3)*alpha3;
      a13 = -2 * ((a3-1) + (a3+1)*cosw03);
      a23 = (a3+1)+(a3-1)*cosw03-2*sqrt(a3)*alpha3;
      b03 /= a03;
      b13 /= a03;
      b23 /= a03;
      a13 /= a03;
      a23 /= a03;

      a5 = 10^(gain5/20);
      q5 = 1.4;
      w05 = 2 * $pi * freq5/srate;
      cosw05 = cos(w05);
      sinw05 = sin(w05);
      alpha5 = sinw05 / (2 * q5);

      b05 = 1 + alpha5 * a5;
      b15 = -2 * cosw05;
      b25 = 1 - alpha5 * a5;
      a05 = 1 + alpha5 / a5;
      a15 = -2 * cosw05;
      a25 = 1 - alpha5 / a5;
      b05 /= a05;
      b15 /= a05;
      b25 /= a05;
      a15 /= a05;
      a25 /= a05;

      a7 = 10^(gain7/40);
      freq7 = 12000;
      s7 = 0.3;
      q7 = 1 / (sqrt((a7 + 1/a7)*(1/s7 - 1) + 2));
      w07 = 2 * $pi * freq7/srate;
      cosw07 = cos(w07);
      sinw07 = sin(w07);
      alpha7 = sinw07 / (2 * q7);

      b07 = a7 * ((a7+1) + (a7-1)*cosw07 + 2*sqrt(a7)*alpha7);
      b17 = -2*a7*((a7-1) + (a7+1)*cosw07);
      b27 = a7*((a7+1) + (a7-1)*cosw07 - 2*sqrt(a7)*alpha7);
      a07 = (a7+1) - (a7-1)*cosw07 + 2*sqrt(a7)*alpha7;
      a17 = 2*((a7-1) - (a7+1)*cosw07);
      a27 = (a7+1)-(a7-1)*cosw07 - 2*sqrt(a7)*alpha7;
      b07 /= a07;
      b17 /= a07;
      b27 /= a07;
      a17 /= a07;
      a27 /= a07;
      //------ Previous @slider code
  );

@slider
  slider_update_function()

@block
  needs_slider_update ? slider_update_function();

@sample

  hpf != 0 ? (
  ospl0 = spl0;
  spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = spl0 ;

  ospl1 = spl1;
  spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = spl1 ;
  );

  lshelf != 0 && gain3 != 0 ? (
  ospl0 = spl0;
  spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = spl0;

  ospl1 = spl1;
  spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = spl1;
  );

  gain5 != 0 ? (
  ospl0 = spl0;
  spl0 = b05 * spl0 + b15 * xl15 + b25 * xl25 - a15 * yl15 - a25 * yl25;
  xl25 = xl15;
  xl15 = ospl0;
  yl25 = yl15;
  yl15 = spl0;

  ospl1 = spl1;
  spl1 = b05 * spl1 + b15 * xr15 + b25 * xr25 - a15 * yr15 - a25 * yr25;
  xr25 = xr15;
  xr15 = ospl1;
  yr25 = yr15;
  yr15 = spl1;
  );

  gain7 != 0 ? (
  ospl0 = spl0;
  spl0 = b07 * spl0 + b17 * xl17 + b27 * xl27 - a17 * yl17 - a27 * yl27;
  xl27 = xl17;
  xl17 = ospl0;
  yl27 = yl17;
  yl17 = spl0;

  ospl1 = spl1;
  spl1 = b07 * spl1 + b17 * xr17 + b27 * xr27 - a17 * yr17 - a27 * yr27;
  xr27 = xr17;
  xr17 = ospl1;
  yr27 = yr17;
  yr17 = spl1;
  );

  spl0 *= gain;
  spl1 *= gain;

@gfx 300 250

  function dem_min_ui_size(dem_min_ui_width, dem_min_ui_height) (
    (gfx_h <= dem_min_ui_height) ? (
      ui_push_rect(0,0,gfx_w,dem_min_ui_height);
      gfx_h = dem_min_ui_height
    );
  );

  function gfx_ui_automate_slider(slidervar*, new_value) (
    slidervar !== new_value ? (
      slidervar = new_value;
      slider_automate(slidervar);
    );
    new_value;
  );

  function gfx_ui_layout_textnumber(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_clear(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    value;
  );

  function gfx_ui_dial_rounded(dem_theme, slidervar*, low, high, bias, default, step) (
    slidervar != floor(slidervar._ui_gen_float/step + 0.5)*step ? slidervar._ui_gen_float = slidervar;
    slidervar._ui_gen_float = control_dial(dem_theme, slidervar._ui_gen_float, low, high, bias, default);
    gfx_ui_automate_slider(slidervar, floor(slidervar._ui_gen_float/step + 0.5)*step);
  );

  function gfx_ui_layout_text(title, text) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      ui_text(text);
    ui_pop();
  );

  function gfx_ui_layout_title(title) (
    gfx_ui_layout_text(title, "");
  );

  function gfx_ui_radio_option(value, optionValue, optionText) (
    ui_align(0.1, 0.5);
    ui_split_left(30);
      value = control_radio(value, optionValue);
    ui_pop();
    ui_click() ? value = optionValue;
    ui_text(optionText);
    value;
  );

  slider4 == 0 ?  dem_low = "Off";
  slider4 == 1 ?  dem_low = "360Hz";
  slider4 == 2 ?  dem_low = "700Hz";
  slider4 == 3 ?  dem_low = "1.6kHz";
  slider4 == 4 ?  dem_low = "3.2kHz";
  slider4 == 5 ?  dem_low = "4.8kHz";

  slider2 == 0 ? dem_mid = "Off";
  slider2 == 1 ? dem_mid = "35Hz";
  slider2 == 2 ? dem_mid = "60Hz";
  slider2 == 3 ? dem_mid = "110Hz";
  slider2 == 4 ? dem_mid = "220Hz";

  slider1 == 0 ? dem_high = "Off";
  slider1 == 1 ? dem_high = "50Hz";
  slider1 == 2 ? dem_high = "80Hz";
  slider1 == 3 ? dem_high = "160Hz";
  slider1 == 4 ? dem_high = "300Hz";

  function dem_mcp_ui() (
    control_start("main", "bitmap-simple", 0);
    ui_screen() === "main" ? (
      ui_split_leftratio(1);
        ui_split_topratio(2/5);
          ui_split_leftratio(1/3);
            gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber_down_value("HPF", slider1, sprintf(#,"%s",dem_high)));
            gfx_ui_dial_rounded(9,slider1, 0, 4, 0, 0, 1);
          ui_split_next();
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber_down_value("Low Shelf", slider2, sprintf(#,"%s",dem_mid)));
            gfx_ui_dial_rounded(9,slider2, 0, 4, 0, 0, 1);
          ui_split_next();
            gfx_ui_automate_slider(slider4, gfx_ui_layout_textnumber_down_value("Mid Freq", slider4, sprintf(#,"%s",dem_low)));
            gfx_ui_dial_rounded(9,slider4, 0, 5, 0, 0, 1);
          ui_pop();
        ui_pop();
        ui_split_topratio(19/20);
          ui_split_leftratio(1/3);
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber_down_title("Low", slider3, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider3, -20, 20, 0, 0, 0.1);
          ui_split_next();
            gfx_ui_automate_slider(slider5, gfx_ui_layout_textnumber_down_title("Mid", slider5, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider5, -20, 20, 0, 0, 0.1);
          ui_split_next();
            gfx_ui_automate_slider(slider6, gfx_ui_layout_textnumber_down_title("High", slider6, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider6, -20, 20, 0, 0, 0.1);
          ui_pop();
        ui_pop();
      ui_pop();
    ) : control_system();
  );

  function dem_full_ui() (
    control_start("main", "bitmap-simple", 0);
    ui_screen() === "main" ? (
      ui_split_leftratio(3/4);
        ui_split_topratio(2/5);
          ui_split_leftratio(1/3);
            gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber("HPF", slider1, sprintf(#,"%s",dem_high)));
            gfx_ui_dial_rounded(9,slider1, 0, 4, 0, 0, 1);
          ui_split_next();
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber("Low Shelf", slider2, sprintf(#,"%s",dem_mid)));
            gfx_ui_dial_rounded(9,slider2, 0, 4, 0, 0, 1);
          ui_split_next();
            gfx_ui_automate_slider(slider4, gfx_ui_layout_textnumber("Mid Freq", slider4, sprintf(#,"%s",dem_low)));
            gfx_ui_dial_rounded(9,slider4, 0, 5, 0, 0, 1);
          ui_pop();
        ui_pop();
        ui_split_topratio(19/20);
          ui_split_leftratio(1/3);
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber("Low", slider3, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider3, -20, 20, 0, 0, 0.1);
          ui_split_next();
            gfx_ui_automate_slider(slider5, gfx_ui_layout_textnumber("Mid", slider5, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider5, -20, 20, 0, 0, 0.1);
          ui_split_next();
            gfx_ui_automate_slider(slider6, gfx_ui_layout_textnumber("High", slider6, "%.1f dB"));
            gfx_ui_dial_rounded(8,slider6, -20, 20, 0, 0, 0.1);
          ui_pop();
        ui_pop();
      ui_pop();
      ui_split_leftratio(1);
        ui_split_leftratio(1/3);
        ui_pop();
        ui_split_leftratio(1/2);
        gfx_ui_automate_slider(slider7, gfx_ui_layout_textnumber("Gain", slider7, "%.1f dB"));
        gfx_ui_dial_rounded(6,slider7, -20, 10, 0, 0, 0.1);
      ui_pop();
    ) : control_system();
  );

  dem_initial_gfx_width = 300;  // inital width in @gfx width height
  dem_initial_gfx_height = 250;  // inital height in @gfx width height
  dem_max_mcp_width = 120;   // maximum embedded width
  dem_max_mcp_height = (gfx_w *(dem_initial_gfx_height/dem_initial_gfx_width)); // keep ratio

  gfx_w <= dem_max_mcp_width ? (
    uix_default_fontsize = 7;
    dem_min_ui_size(dem_max_mcp_width, dem_max_mcp_height);
    dem_mcp_ui();

  ) : (
    uix_default_fontsize = 12;
    //dem_min_ui_size(121, 121);
    dem_full_ui();
  );

  ui_interacted() ? needs_slider_update = 1;

