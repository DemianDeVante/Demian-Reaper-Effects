Version: 1.3
desc:D Reverb Room
author: chmaha
about:
  Uses DSP from airwindows "Verbity" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Verbity (MIT License)
  JSFX version released under GPLv3 license

slider1:0.25<0,1,0.01>-Bigness
slider2:0<0,1,0.01>-Longness
slider3:0.25<0,1,0.01>-Darkness
slider4:0.25<0,1,0.01>-Wetness

import ui-lib.jsfx-inc
filename:0,themes/bitmap-simple/theme-cyan.png
needs_slider_update

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

  freemem = ui_setup(1000000);
    
  freemem = 0;
  aIL = freemem; freemem+=6480;
  aJL = freemem; freemem+=3660;
  aKL = freemem; freemem+=1720;
  aLL = freemem; freemem+=680;
    
  aAL = freemem; freemem+=9700;
  aBL = freemem; freemem+=6000;
  aCL = freemem; freemem+=2320;
  aDL = freemem; freemem+=940;
    
  aEL = freemem; freemem+=15220;
  aFL = freemem; freemem+=8460;
  aGL = freemem; freemem+=4540;
  aHL = freemem; freemem+=3200;
    
  lastRefL = freemem; freemem+=7;
    
  aIR = freemem; freemem+=6480;
  aJR = freemem; freemem+=3660;
  aKR = freemem; freemem+=1720;
  aLR = freemem; freemem+=680;
    
  aAR = freemem; freemem+=9700;
  aBR = freemem; freemem+=6000;
  aCR = freemem; freemem+=2320;
  aDR = freemem; freemem+=940;
    
  aER = freemem; freemem+=15220;
  aFR = freemem; freemem+=8460;
  aGR = freemem; freemem+=4540;
  aHR = freemem; freemem+=3200;
  
  lastRefR = freemem; freemem+=7;

  countI = 1;
  countJ = 1;
  countK = 1;
  countL = 1;

  countA = 1;
  countB = 1;
  countC = 1;
  countD = 1;  

  countE = 1;
  countF = 1;
  countG = 1;
  countH = 1;

  function slider_update_function() (
    	needs_slider_update = 0;
    	//------ Previous @slider code
      A = slider1;
      B = slider2;
      C = slider3;
      D = slider4;
    	//------ Previous @slider code
  );

@slider
  slider_update_function()

@block

  overallscale = 1.0;
  overallscale /= 44100.0;
  overallscale *= srate;

  cycleEnd = floor(overallscale);
  (cycleEnd < 1) ? cycleEnd = 1;
  (cycleEnd > 4) ? cycleEnd = 4;
  (cycle > cycleEnd-1) ? cycle = cycleEnd-1; 
    
  size = (A*1.77)+0.1;
  regen = 0.0625+(B*0.03125); 
  lowpass = (1.0-pow(C,2.0))/sqrt(overallscale);
  interpolate = pow(C,2.0)*0.618033988749894848204586; 
  thunderAmount = (0.3-(B*0.22))*C*0.1;
  wet = D*2.0;
  dry = 2.0 - wet;
  (wet > 1.0) ? wet = 1.0;
  (wet < 0.0) ? wet = 0.0;
  (dry > 1.0) ? dry = 1.0;
  (dry < 0.0) ? dry = 0.0;
    
  delayI = 3407.0*size | 0;
  delayJ = 1823.0*size | 0;
  delayK = 859.0*size | 0;
  delayL = 331.0*size | 0;
    
  delayA = 4801.0*size | 0;
  delayB = 2909.0*size | 0;
  delayC = 1153.0*size | 0;
  delayD = 461.0*size | 0;
    
  delayE = 7607.0*size | 0;
  delayF = 4217.0*size | 0;
  delayG = 2269.0*size | 0;
  delayH = 1597.0*size | 0;

  needs_slider_update ? slider_update_function();


@sample

  inputSampleL = spl0;
  inputSampleR = spl1;


  drySampleL = inputSampleL;
  drySampleR = inputSampleR;

  (abs(iirAL)<1.18*10^-37) ? iirAL = 0.0;
  iirAL = (iirAL*(1.0-lowpass))+(inputSampleL*lowpass); inputSampleL = iirAL;
  (abs(iirAR)<1.18*10^-37) ? iirAR = 0.0;
  iirAR = (iirAR*(1.0-lowpass))+(inputSampleR*lowpass); inputSampleR = iirAR;

  cycle+=1;
  (cycle == cycleEnd) ? (
    feedbackAL = (feedbackAL*(1.0-interpolate))+(previousAL*interpolate); previousAL = feedbackAL;
    feedbackBL = (feedbackBL*(1.0-interpolate))+(previousBL*interpolate); previousBL = feedbackBL;
    feedbackCL = (feedbackCL*(1.0-interpolate))+(previousCL*interpolate); previousCL = feedbackCL;
    feedbackDL = (feedbackDL*(1.0-interpolate))+(previousDL*interpolate); previousDL = feedbackDL;
    feedbackAR = (feedbackAR*(1.0-interpolate))+(previousAR*interpolate); previousAR = feedbackAR;
    feedbackBR = (feedbackBR*(1.0-interpolate))+(previousBR*interpolate); previousBR = feedbackBR;
    feedbackCR = (feedbackCR*(1.0-interpolate))+(previousCR*interpolate); previousCR = feedbackCR;
    feedbackDR = (feedbackDR*(1.0-interpolate))+(previousDR*interpolate); previousDR = feedbackDR;
    
    thunderL = (thunderL*0.99)-(feedbackAL*thunderAmount);
    thunderR = (thunderR*0.99)-(feedbackAR*thunderAmount);
    
    aIL[countI] = inputSampleL + ((feedbackAL+thunderL) * regen);
    aJL[countJ] = inputSampleL + (feedbackBL * regen);
    aKL[countK] = inputSampleL + (feedbackCL * regen);
    aLL[countL] = inputSampleL + (feedbackDL * regen);
    aIR[countI] = inputSampleR + ((feedbackAR+thunderR) * regen);
    aJR[countJ] = inputSampleR + (feedbackBR * regen);
    aKR[countK] = inputSampleR + (feedbackCR * regen);
    aLR[countL] = inputSampleR + (feedbackDR * regen);
    
    countI+=1; (countI < 0 || countI > delayI) ? countI = 0;
    countJ+=1; (countJ < 0 || countJ > delayJ) ? countJ = 0;
    countK+=1; (countK < 0 || countK > delayK) ? countK = 0;
    countL+=1; (countL < 0 || countL > delayL) ? countL = 0;
    
    outIL = aIL[countI-((countI > delayI)?delayI+1:0)];
    outJL = aJL[countJ-((countJ > delayJ)?delayJ+1:0)];
    outKL = aKL[countK-((countK > delayK)?delayK+1:0)];
    outLL = aLL[countL-((countL > delayL)?delayL+1:0)];
    outIR = aIR[countI-((countI > delayI)?delayI+1:0)];
    outJR = aJR[countJ-((countJ > delayJ)?delayJ+1:0)];
    outKR = aKR[countK-((countK > delayK)?delayK+1:0)];
    outLR = aLR[countL-((countL > delayL)?delayL+1:0)];
    
    aAL[countA] = (outIL - (outJL + outKL + outLL));
    aBL[countB] = (outJL - (outIL + outKL + outLL));
    aCL[countC] = (outKL - (outIL + outJL + outLL));
    aDL[countD] = (outLL - (outIL + outJL + outKL));
    aAR[countA] = (outIR - (outJR + outKR + outLR));
    aBR[countB] = (outJR - (outIR + outKR + outLR));
    aCR[countC] = (outKR - (outIR + outJR + outLR));
    aDR[countD] = (outLR - (outIR + outJR + outKR));
    
    countA+=1; (countA < 0 || countA > delayA) ? countA = 0;
    countB+=1; (countB < 0 || countB > delayB) ? countB = 0;
    countC+=1; (countC < 0 || countC > delayC) ? countC = 0;
    countD+=1; (countD < 0 || countD > delayD) ? countD = 0;
    
    outAL = aAL[countA-((countA > delayA)?delayA+1:0)];
    outBL = aBL[countB-((countB > delayB)?delayB+1:0)];
    outCL = aCL[countC-((countC > delayC)?delayC+1:0)];
    outDL = aDL[countD-((countD > delayD)?delayD+1:0)];
    outAR = aAR[countA-((countA > delayA)?delayA+1:0)];
    outBR = aBR[countB-((countB > delayB)?delayB+1:0)];
    outCR = aCR[countC-((countC > delayC)?delayC+1:0)];
    outDR = aDR[countD-((countD > delayD)?delayD+1:0)];
    
    aEL[countE] = (outAL - (outBL + outCL + outDL));
    aFL[countF] = (outBL - (outAL + outCL + outDL));
    aGL[countG] = (outCL - (outAL + outBL + outDL));
    aHL[countH] = (outDL - (outAL + outBL + outCL));
    aER[countE] = (outAR - (outBR + outCR + outDR));
    aFR[countF] = (outBR - (outAR + outCR + outDR));
    aGR[countG] = (outCR - (outAR + outBR + outDR));
    aHR[countH] = (outDR - (outAR + outBR + outCR));
    
    countE+=1; (countE < 0 || countE > delayE) ? countE = 0;
    countF+=1; (countF < 0 || countF > delayF) ? countF = 0;
    countG+=1; (countG < 0 || countG > delayG) ? countG = 0;
    countH+=1; (countH < 0 || countH > delayH) ? countH = 0;
    
    outEL = aEL[countE-((countE > delayE)?delayE+1:0)];
    outFL = aFL[countF-((countF > delayF)?delayF+1:0)];
    outGL = aGL[countG-((countG > delayG)?delayG+1:0)];
    outHL = aHL[countH-((countH > delayH)?delayH+1:0)];
    outER = aER[countE-((countE > delayE)?delayE+1:0)];
    outFR = aFR[countF-((countF > delayF)?delayF+1:0)];
    outGR = aGR[countG-((countG > delayG)?delayG+1:0)];
    outHR = aHR[countH-((countH > delayH)?delayH+1:0)];
    
    feedbackAL = (outEL - (outFL + outGL + outHL));
    feedbackBL = (outFL - (outEL + outGL + outHL));
    feedbackCL = (outGL - (outEL + outFL + outHL));
    feedbackDL = (outHL - (outEL + outFL + outGL));
    feedbackAR = (outER - (outFR + outGR + outHR));
    feedbackBR = (outFR - (outER + outGR + outHR));
    feedbackCR = (outGR - (outER + outFR + outHR));
    feedbackDR = (outHR - (outER + outFR + outGR));
    
    inputSampleL = (outEL + outFL + outGL + outHL)/8.0;
    inputSampleR = (outER + outFR + outGR + outHR)/8.0;

    (cycleEnd == 4) ? (
      lastRefL[0] = lastRefL[4]; 
      lastRefL[2] = (lastRefL[0] + inputSampleL)/2; 
      lastRefL[1] = (lastRefL[0] + lastRefL[2])/2; 
      lastRefL[3] = (lastRefL[2] + inputSampleL)/2; 
      lastRefL[4] = inputSampleL; 
      lastRefR[0] = lastRefR[4]; 
      lastRefR[2] = (lastRefR[0] + inputSampleR)/2; 
      lastRefR[1] = (lastRefR[0] + lastRefR[2])/2; 
      lastRefR[3] = (lastRefR[2] + inputSampleR)/2; 
      lastRefR[4] = inputSampleR;
    );
    (cycleEnd == 3) ? (
      lastRefL[0] = lastRefL[3]; 
      lastRefL[2] = (lastRefL[0]+lastRefL[0]+inputSampleL)/3;
      lastRefL[1] = (lastRefL[0]+inputSampleL+inputSampleL)/3; 
      lastRefL[3] = inputSampleL;
      lastRefR[0] = lastRefR[3]; 
      lastRefR[2] = (lastRefR[0]+lastRefR[0]+inputSampleR)/3; 
      lastRefR[1] = (lastRefR[0]+inputSampleR+inputSampleR)/3; 
      lastRefR[3] = inputSampleR; 
    );
    (cycleEnd == 2) ? (
      lastRefL[0] = lastRefL[2]; 
      lastRefL[1] = (lastRefL[0] + inputSampleL)/2; 
      lastRefL[2] = inputSampleL; 
      lastRefR[0] = lastRefR[2]; 
      lastRefR[1] = (lastRefR[0] + inputSampleR)/2; 
      lastRefR[2] = inputSampleR; 
    );
    (cycleEnd == 1) ? (
      lastRefL[0] = inputSampleL;
      lastRefR[0] = inputSampleR;
    );
    cycle = 0;
    inputSampleL = lastRefL[cycle];
    inputSampleR = lastRefR[cycle];
  ) : (
    inputSampleL = lastRefL[cycle];
    inputSampleR = lastRefR[cycle];
  );

  (abs(iirBL)<1.18*10^-37) ? iirBL = 0.0;
  iirBL = (iirBL*(1.0-lowpass))+(inputSampleL*lowpass); inputSampleL = iirBL;
  (abs(iirBR)<1.18*10^-37) ? iirBR = 0.0;
  iirBR = (iirBR*(1.0-lowpass))+(inputSampleR*lowpass); inputSampleR = iirBR;

  (wet < 1.0) ? (inputSampleL *= wet; inputSampleR *= wet;);
  (dry < 1.0) ? (drySampleL *= dry; drySampleR *= dry;);
  inputSampleL += drySampleL;
  inputSampleR += drySampleR;



  spl0 = inputSampleL;
  spl1 = inputSampleR;

@gfx 240 120

  function dem_min_ui_size(dem_min_ui_width, dem_min_ui_height) (
    (gfx_h <= dem_min_ui_height) ? (
      ui_push_rect(0,0,gfx_w,dem_min_ui_height);
      gfx_h = dem_min_ui_height
    );
  );

  function gfx_ui_automate_slider(slidervar*, new_value) (
    slidervar !== new_value ? (
      slidervar = new_value;
      slider_automate(slidervar);
    );
    new_value;
  );

  function gfx_ui_layout_textnumber(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_up_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_title(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      ui_text(title);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_down_value(title, value, format) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_bottom(h);
      value = control_hidden_textnumber(value, value*1.00000001, format);
    ui_pop();
    value;
  );

  function gfx_ui_layout_textnumber_clear(title, value, format) local(h) (
    value;
  );

  function gfx_ui_dial_rounded(dem_theme, slidervar*, low, high, bias, default, step) (
    slidervar != floor(slidervar._ui_gen_float/step + 0.5)*step ? slidervar._ui_gen_float = slidervar;
    slidervar._ui_gen_float = control_dial(dem_theme, slidervar._ui_gen_float, low, high, bias, default);
    gfx_ui_automate_slider(slidervar, floor(slidervar._ui_gen_float/step + 0.5)*step);
  );

  function gfx_ui_layout_text(title, text) local(h) (
    h = max((ui_height() - 60)/2, ui_height()*0.2);
    ui_split_top(h);
      ui_text(title);
    ui_pop();
    ui_split_bottom(h);
      ui_text(text);
    ui_pop();
  );

  function gfx_ui_layout_title(title) (
    gfx_ui_layout_text(title, "");
  );

  function gfx_ui_radio_option(value, optionValue, optionText) (
    ui_align(0.1, 0.5);
    ui_split_left(30);
      value = control_radio(value, optionValue);
    ui_pop();
    ui_click() ? value = optionValue;
    ui_text(optionText);
    value;
  );

  function dem_mcp_ui() (
    control_start("main", "bitmap-simple", 0);
    ui_screen() === "main" ? (
      ui_split_leftratio(3/8);
            gfx_ui_automate_slider(slider4, gfx_ui_layout_textnumber_down_title("Wet", slider4, "%.2f"));
            gfx_ui_dial_rounded(8,slider4, 0, 1, 0, 0.25, 0.01);
      ui_pop();
      ui_split_leftratio(3/5);
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber_down_title("Long", slider2, "%.2f"));
            gfx_ui_dial_rounded(7,slider2, 0, 1, 0, 0, 0.01);
      ui_pop();
      ui_split_leftratio(1);
        ui_split_topratio(2/5);
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber_clear("Dark", slider3, "%.2f"));
            gfx_ui_dial_rounded(9,slider3, 0, 1, 0, 0.25, 0.01);
        ui_pop();
        ui_split_topratio(19/20);
             gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber_down_title("Big", slider1, "%.2f"));
            gfx_ui_dial_rounded(9,slider1, 0, 1, 0, 0.25, 0.01);
        ui_pop();
      ui_pop();
    ) : control_system();
  );

  function dem_full_ui() (
    control_start("main", "bitmap-simple", 0);

    ui_screen() === "main" ? (
      ui_split_topratio(1/1); // single row
        ui_split_leftratio(4/4);
          // row 1, group 1
          ui_split_leftratio(1/4);
            gfx_ui_automate_slider(slider4, gfx_ui_layout_textnumber("Wetness", slider4, "%.2f"));
            gfx_ui_dial_rounded(8,slider4, 0, 1, 0, 0.25, 0.01);
          ui_split_next();
            gfx_ui_automate_slider(slider2, gfx_ui_layout_textnumber("Longness", slider2, "%.2f"));
            gfx_ui_dial_rounded(7,slider2, 0, 1, 0, 0, 0.01);
          ui_split_next();
            gfx_ui_automate_slider(slider3, gfx_ui_layout_textnumber("Darkness", slider3, "%.2f"));
            gfx_ui_dial_rounded(9,slider3, 0, 1, 0, 0.25, 0.01);
          ui_split_next();
            gfx_ui_automate_slider(slider1, gfx_ui_layout_textnumber("Bigness", slider1, "%.2f"));
            gfx_ui_dial_rounded(9,slider1, 0, 1, 0, 0.25, 0.01);
          ui_pop();
        ui_pop();
      ui_pop();
    ) : control_system();
  );

  dem_initial_gfx_width = 240;  // inital width in @gfx width height
  dem_initial_gfx_height = 120;  // inital height in @gfx width height
  dem_max_mcp_width = 120;   // maximum embedded width
  dem_max_mcp_height = (gfx_w *(dem_initial_gfx_height/dem_initial_gfx_width)); // keep ratio

  gfx_w <= dem_max_mcp_width ? (
    uix_default_fontsize = 7;
    dem_min_ui_size(dem_max_mcp_width, dem_max_mcp_height);
    dem_mcp_ui();

  ) : (
    uix_default_fontsize = 12;
    //dem_min_ui_size(121, 121);
    dem_full_ui();
  );

  ui_interacted() ? needs_slider_update = 1;